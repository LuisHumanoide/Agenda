/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package translator;
import java_cup.runtime.*; // defines the Symbol class

// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>C:/Users/Humanoide/Documents/Projs2/agenda/Agenda/src/translator/Scanner.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\7\1\43\1\43\1\43\22\0\1\2\1\0\1\10"+
    "\1\42\3\0\1\5\7\0\1\41\12\1\1\40\4\0\1\5\1\0"+
    "\32\4\1\0\1\11\2\0\1\3\1\0\1\15\1\36\1\12\1\21"+
    "\1\14\1\31\1\26\1\25\1\27\1\35\1\20\1\22\1\17\1\6"+
    "\1\23\1\37\1\3\1\13\1\34\1\16\1\33\1\24\1\30\1\3"+
    "\1\32\1\3\12\0\1\43\u1fa2\0\1\43\1\43\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\17\1\1\7\1\10\1\2\2\0\1\11\1\12\5\0"+
    "\1\13\3\0\1\14\5\0\1\15\3\0\1\16\4\0"+
    "\1\17\14\0\1\2\2\0\1\12\5\0\1\20\3\0"+
    "\1\21\5\0\1\22\7\0\1\23\1\24\1\25\1\26"+
    "\15\0\1\27\1\0\1\30\1\12\15\0\1\31\1\0"+
    "\1\32\2\0\1\33\1\34\2\0\1\35\1\36\2\0"+
    "\1\37\5\0\1\40\1\41\2\0\1\30\6\0\1\42"+
    "\1\43\1\44\3\0\1\45\11\0\1\46\3\0\2\12"+
    "\1\47\1\50\1\0\1\51\1\52\1\53\2\0\1\54"+
    "\1\55\1\0\1\56\2\0\1\57\3\0\1\60\4\0"+
    "\1\61\1\0\1\62\4\0\1\63\1\64\1\0\1\65"+
    "\1\66\1\0\1\67\1\0\1\70\1\0\1\71\1\72"+
    "\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\44\0\330"+
    "\0\374\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8"+
    "\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\u0318"+
    "\0\u033c\0\u0360\0\u0384\0\u03a8\0\44\0\u03cc\0\u03f0\0\u0414"+
    "\0\u0438\0\u045c\0\u0480\0\44\0\u04a4\0\u04c8\0\u04ec\0\u0510"+
    "\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\44\0\u05e8\0\u060c"+
    "\0\u0630\0\44\0\u0654\0\u0678\0\u069c\0\u06c0\0\44\0\u06e4"+
    "\0\u0708\0\u072c\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804"+
    "\0\u0828\0\u084c\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0900\0\u0924"+
    "\0\u0948\0\u096c\0\u0990\0\u09b4\0\44\0\u09d8\0\u09fc\0\u0a20"+
    "\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4\0\u0af8\0\44\0\u0b1c"+
    "\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\u0bd0\0\u0bf4\0\44\0\44"+
    "\0\44\0\44\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc"+
    "\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4\0\u0dc8\0\44"+
    "\0\u0dec\0\44\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4"+
    "\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4"+
    "\0\44\0\u1008\0\44\0\u102c\0\u1050\0\44\0\44\0\u1074"+
    "\0\u1098\0\44\0\44\0\u10bc\0\u10e0\0\44\0\u1104\0\u1128"+
    "\0\u114c\0\u1170\0\u1194\0\44\0\44\0\u11b8\0\u11dc\0\u1200"+
    "\0\u1224\0\u1248\0\u126c\0\u1290\0\u12b4\0\u12d8\0\44\0\44"+
    "\0\44\0\u12fc\0\u1320\0\u1344\0\44\0\u1368\0\u138c\0\u13b0"+
    "\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488\0\44\0\u14ac"+
    "\0\u14d0\0\u14f4\0\u1200\0\u1518\0\44\0\44\0\u153c\0\44"+
    "\0\44\0\44\0\u1560\0\u1584\0\44\0\44\0\u15a8\0\44"+
    "\0\u15cc\0\u15f0\0\44\0\u1614\0\u1638\0\u165c\0\44\0\u1680"+
    "\0\u16a4\0\u16c8\0\u16ec\0\44\0\u1710\0\44\0\u1734\0\u1758"+
    "\0\u177c\0\u17a0\0\44\0\44\0\u17c4\0\44\0\44\0\u17e8"+
    "\0\44\0\u180c\0\44\0\u1830\0\44\0\44\0\44";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\2\1\6\1\7"+
    "\1\10\1\2\1\11\1\12\1\2\1\13\1\14\1\15"+
    "\1\2\1\16\1\17\1\20\1\2\1\21\1\2\1\22"+
    "\1\23\1\24\1\25\1\2\1\26\1\27\3\2\1\30"+
    "\1\31\46\0\1\32\36\0\1\33\5\0\1\4\42\0"+
    "\1\5\1\0\2\5\1\0\1\5\3\0\26\5\27\0"+
    "\1\34\20\0\7\10\1\0\1\35\1\36\32\10\13\0"+
    "\1\37\1\0\1\40\5\0\1\41\1\0\1\42\32\0"+
    "\1\43\45\0\1\44\2\0\1\45\11\0\1\46\3\0"+
    "\1\47\27\0\1\50\1\0\1\51\5\0\1\52\24\0"+
    "\1\53\1\54\5\0\1\55\6\0\1\56\25\0\1\57"+
    "\1\60\51\0\1\61\26\0\1\62\3\0\1\63\20\0"+
    "\1\64\24\0\1\65\12\0\1\66\22\0\1\67\7\0"+
    "\1\70\41\0\1\71\12\0\1\72\27\0\1\73\1\74"+
    "\52\0\1\75\34\0\1\76\1\77\7\0\1\100\5\0"+
    "\1\101\25\0\1\102\15\0\1\103\51\0\1\31\2\0"+
    "\7\31\1\0\34\31\1\0\1\104\36\0\1\33\4\0"+
    "\1\105\66\0\1\106\17\0\5\107\2\10\1\0\2\10"+
    "\4\107\1\10\25\107\14\0\1\110\35\0\1\111\54\0"+
    "\1\112\41\0\1\113\45\0\1\114\45\0\1\115\50\0"+
    "\1\116\30\0\1\117\51\0\1\120\36\0\1\121\16\0"+
    "\1\122\24\0\1\123\50\0\1\124\35\0\1\125\4\0"+
    "\1\126\11\0\1\127\17\0\1\130\15\0\1\131\31\0"+
    "\1\132\7\0\1\133\37\0\1\134\33\0\1\135\53\0"+
    "\1\136\40\0\1\137\43\0\1\140\64\0\1\141\43\0"+
    "\1\142\30\0\1\143\40\0\1\144\50\0\1\145\3\0"+
    "\1\146\52\0\1\147\40\0\1\150\47\0\1\151\22\0"+
    "\1\152\50\0\1\153\26\0\1\154\43\0\1\155\43\0"+
    "\1\156\13\0\1\157\22\0\1\104\43\0\1\160\56\0"+
    "\1\161\27\0\7\107\1\0\1\162\1\163\32\107\15\0"+
    "\1\164\40\0\1\165\50\0\1\166\32\0\1\167\60\0"+
    "\1\170\53\0\1\171\37\0\1\172\31\0\1\173\55\0"+
    "\1\174\27\0\1\175\64\0\1\176\36\0\1\177\26\0"+
    "\1\200\45\0\1\201\50\0\1\202\36\0\1\203\43\0"+
    "\1\204\43\0\1\205\43\0\1\206\55\0\1\207\40\0"+
    "\1\210\26\0\1\211\62\0\1\212\35\0\1\213\45\0"+
    "\1\214\35\0\1\215\43\0\1\216\46\0\1\217\60\0"+
    "\1\220\23\0\1\221\51\0\1\222\55\0\1\223\24\0"+
    "\1\224\61\0\1\225\30\0\1\226\24\0\5\227\2\107"+
    "\1\0\1\230\1\107\4\227\1\107\25\227\16\0\1\231"+
    "\41\0\1\232\56\0\1\233\42\0\1\234\41\0\1\235"+
    "\53\0\1\236\31\0\1\237\53\0\1\240\24\0\1\241"+
    "\64\0\1\242\30\0\1\243\55\0\1\244\35\0\1\245"+
    "\33\0\1\246\45\0\1\247\42\0\1\250\63\0\1\251"+
    "\21\0\1\252\44\0\1\253\61\0\1\254\24\0\1\255"+
    "\42\0\1\256\46\0\1\257\42\0\1\260\43\0\1\261"+
    "\64\0\1\262\5\0\7\227\1\0\1\162\33\227\7\263"+
    "\2\0\1\264\32\263\14\0\1\265\51\0\1\266\37\0"+
    "\1\267\41\0\1\270\43\0\1\271\45\0\1\272\46\0"+
    "\1\273\37\0\1\274\45\0\1\275\56\0\1\276\47\0"+
    "\1\277\21\0\1\300\43\0\1\301\63\0\1\302\41\0"+
    "\1\303\26\0\1\304\45\0\1\305\45\0\1\306\54\0"+
    "\1\307\24\0\1\310\44\0\1\311\34\0\2\263\1\0"+
    "\2\263\4\0\1\263\44\0\1\312\41\0\1\313\60\0"+
    "\1\314\25\0\1\315\42\0\1\316\51\0\1\317\35\0"+
    "\1\320\66\0\1\321\22\0\1\322\60\0\1\323\24\0"+
    "\1\324\44\0\1\325\61\0\1\326\24\0\1\327\45\0"+
    "\1\330\60\0\1\331\25\0\1\332\61\0\1\333\17\0"+
    "\1\334\67\0\1\335\24\0\1\336\46\0\1\337\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6228];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\23\1\2\0\1\11\1\1"+
    "\5\0\1\11\3\0\1\1\5\0\1\11\3\0\1\11"+
    "\4\0\1\11\14\0\1\1\2\0\1\1\5\0\1\11"+
    "\3\0\1\1\5\0\1\11\7\0\4\11\15\0\1\11"+
    "\1\0\1\11\1\1\15\0\1\11\1\0\1\11\2\0"+
    "\2\11\2\0\2\11\2\0\1\11\5\0\2\11\2\0"+
    "\1\1\6\0\3\11\3\0\1\11\11\0\1\11\3\0"+
    "\2\1\2\11\1\0\3\11\2\0\2\11\1\0\1\11"+
    "\2\0\1\11\3\0\1\11\4\0\1\11\1\0\1\11"+
    "\4\0\2\11\1\0\2\11\1\0\1\11\1\0\1\11"+
    "\1\0\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[223];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 116) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return new Symbol(sym.errorlex, yychar, yyline, new String (yytext()));
          }
        case 60: break;
        case 2: 
          { return new Symbol(sym.INTLITERAL, yychar, yyline, new String(yytext()));
          }
        case 61: break;
        case 3: 
          { CharNum.num += yytext().length();
          }
        case 62: break;
        case 4: 
          { {return new Symbol(sym.OBJECT, yychar, yyline, new String(yytext()));}
          }
        case 63: break;
        case 5: 
          { CharNum.num = 1;
          }
        case 64: break;
        case 6: 
          { // unterminated string
          }
        case 65: break;
        case 7: 
          { return new Symbol(sym.SLASH, yychar, yyline);
          }
        case 66: break;
        case 8: 
          { // comment - ignore. Note: don't need to update char num 
            // since everything to end of line will be ignored
          }
        case 67: break;
        case 9: 
          { return new Symbol(sym.STRINGLITERAL, yychar, yyline, new String(yytext()));
          }
        case 68: break;
        case 10: 
          { 
          }
        case 69: break;
        case 11: 
          { return new Symbol(sym.AT, yychar, yyline);
          }
        case 70: break;
        case 12: 
          { return new Symbol(sym.TO, yychar, yyline);
          }
        case 71: break;
        case 13: 
          { return new Symbol(sym.MY, yychar, yyline);
          }
        case 72: break;
        case 14: 
          { return new Symbol(sym.ON, yychar, yyline);
          }
        case 73: break;
        case 15: 
          { return new Symbol(sym.IN, yychar, yyline);
          }
        case 74: break;
        case 16: 
          { return new Symbol(sym.ADD, yychar, yyline);
          }
        case 75: break;
        case 17: 
          { return new Symbol(sym.THE, yychar, yyline);
          }
        case 76: break;
        case 18: 
          { return new Symbol(sym.MAY, yychar, yyline);
          }
        case 77: break;
        case 19: 
          { return new Symbol(sym.OUR, yychar, yyline);
          }
        case 78: break;
        case 20: 
          { return new Symbol(sym.HER, yychar, yyline);
          }
        case 79: break;
        case 21: 
          { return new Symbol(sym.HIS, yychar, yyline);
          }
        case 80: break;
        case 22: 
          { return new Symbol(sym.ITS, yychar, yyline);
          }
        case 81: break;
        case 23: 
          { return new Symbol(sym.HOUR, yychar, yyline, new String(yytext()));
          }
        case 82: break;
        case 24: 
          { // bad escape character

            CharNum.num += yytext().length();
          }
        case 83: break;
        case 25: 
          { return new Symbol(sym.MAKE, yychar, yyline);
          }
        case 84: break;
        case 26: 
          { return new Symbol(sym.MOVE, yychar, yyline);
          }
        case 85: break;
        case 27: 
          { return new Symbol(sym.DATE, yychar, yyline);
          }
        case 86: break;
        case 28: 
          { return new Symbol(sym.LONG, yychar, yyline);
          }
        case 87: break;
        case 29: 
          { return new Symbol(sym.WITH, yychar, yyline);
          }
        case 88: break;
        case 30: 
          { return new Symbol(sym.FROM, yychar, yyline);
          }
        case 89: break;
        case 31: 
          { return new Symbol(sym.YOUR, yychar, yyline);
          }
        case 90: break;
        case 32: 
          { return new Symbol(sym.JUNE, yychar, yyline);
          }
        case 91: break;
        case 33: 
          { return new Symbol(sym.JULY, yychar, yyline);
          }
        case 92: break;
        case 34: 
          { return new Symbol(sym.APRIL, yychar, yyline);
          }
        case 93: break;
        case 35: 
          { return new Symbol(sym.TODAY, yychar, yyline);
          }
        case 94: break;
        case 36: 
          { return new Symbol(sym.THEIR, yychar, yyline);
          }
        case 95: break;
        case 37: 
          { return new Symbol(sym.MARCH, yychar, yyline);
          }
        case 96: break;
        case 38: 
          { return new Symbol(sym.SHORT, yychar, yyline);
          }
        case 97: break;
        case 39: 
          { return new Symbol(sym.CREATE, yychar, yyline);
          }
        case 98: break;
        case 40: 
          { return new Symbol(sym.CANCEL, yychar, yyline);
          }
        case 99: break;
        case 41: 
          { return new Symbol(sym.CHANGE, yychar, yyline);
          }
        case 100: break;
        case 42: 
          { return new Symbol(sym.REMOVE, yychar, yyline);
          }
        case 101: break;
        case 43: 
          { return new Symbol(sym.AUGUST, yychar, yyline);
          }
        case 102: break;
        case 44: 
          { return new Symbol(sym.MEDIUM, yychar, yyline);
          }
        case 103: break;
        case 45: 
          { return new Symbol(sym.MONDAY, yychar, yyline);
          }
        case 104: break;
        case 46: 
          { return new Symbol(sym.DELETE, yychar, yyline);
          }
        case 105: break;
        case 47: 
          { return new Symbol(sym.FRIDAY, yychar, yyline);
          }
        case 106: break;
        case 48: 
          { return new Symbol(sym.SUNDAY, yychar, yyline);
          }
        case 107: break;
        case 49: 
          { return new Symbol(sym.TUESDAY, yychar, yyline);
          }
        case 108: break;
        case 50: 
          { return new Symbol(sym.OCTOBER, yychar, yyline);
          }
        case 109: break;
        case 51: 
          { return new Symbol(sym.JANUARY, yychar, yyline);
          }
        case 110: break;
        case 52: 
          { return new Symbol(sym.NOVEMBER, yychar, yyline);
          }
        case 111: break;
        case 53: 
          { return new Symbol(sym.THURSDAY, yychar, yyline);
          }
        case 112: break;
        case 54: 
          { return new Symbol(sym.DECEMBER, yychar, yyline);
          }
        case 113: break;
        case 55: 
          { return new Symbol(sym.FEBRUARY, yychar, yyline);
          }
        case 114: break;
        case 56: 
          { return new Symbol(sym.SATURDAY, yychar, yyline);
          }
        case 115: break;
        case 57: 
          { return new Symbol(sym.WEDNESDAY, yychar, yyline);
          }
        case 116: break;
        case 58: 
          { return new Symbol(sym.SEPTEMBER, yychar, yyline);
          }
        case 117: break;
        case 59: 
          { return new Symbol(sym.COMMITMENT, yychar, yyline);
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { return new Symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

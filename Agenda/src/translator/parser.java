
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 19 16:08:42 PDT 2017
//----------------------------------------------------

package translator;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 19 16:08:42 PDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\012\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\002\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\006\003\000\002\006\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\002\000\002\010\003" +
    "\000\002\010\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\002\000\002" +
    "\012\004\000\002\012\005\000\002\012\003\000\002\021" +
    "\003\000\002\021\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\002\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\015" +
    "\003\000\002\015\005\000\002\015\007\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\002\000" +
    "\002\017\003\000\002\017\004\000\002\017\004\000\002" +
    "\017\002\000\002\022\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\034\004\005\005\021\006\015\007\017\010" +
    "\010\011\016\012\004\013\013\014\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\067\011\001\002\000\012\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\001\002\000\012\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\001\002\000\012\014\ufffd\015\ufffd\016\ufffd\017" +
    "\ufffd\001\002\000\004\002\112\001\002\000\012\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\001\002\000\004\002\uffff\001" +
    "\002\000\012\014\ufffe\015\ufffe\016\ufffe\017\ufffe\001\002" +
    "\000\012\014\ufff6\015\ufff6\016\ufff6\017\ufff6\001\002\000" +
    "\012\014\ufffc\015\ufffc\016\ufffc\017\ufffc\001\002\000\012" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\001\002\000\012\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\001\002\000\012\014\ufff3" +
    "\015\ufff3\016\ufff3\017\ufff3\001\002\000\012\014\023\015" +
    "\024\016\ufff0\017\ufff0\001\002\000\012\014\ufff9\015\ufff9" +
    "\016\ufff9\017\ufff9\001\002\000\006\016\027\017\026\001" +
    "\002\000\006\016\ufff2\017\ufff2\001\002\000\006\016\ufff1" +
    "\017\ufff1\001\002\000\042\017\uffce\020\uffce\021\uffce\022" +
    "\uffce\052\036\054\uffce\055\uffce\056\035\057\037\060\042" +
    "\061\030\062\040\063\032\064\043\065\031\067\uffce\001" +
    "\002\000\042\017\uffee\020\uffee\021\uffee\022\uffee\052\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\062" +
    "\uffee\063\uffee\064\uffee\065\uffee\067\uffee\001\002\000\042" +
    "\017\uffef\020\uffef\021\uffef\022\uffef\052\uffef\054\uffef\055" +
    "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\065\uffef\067\uffef\001\002\000\004\052\uffca\001" +
    "\002\000\004\052\uffc7\001\002\000\004\052\uffc8\001\002" +
    "\000\020\017\046\020\051\021\050\022\047\054\uffe9\055" +
    "\uffe9\067\uffe9\001\002\000\004\052\045\001\002\000\004" +
    "\052\uffcd\001\002\000\020\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\054\uffd1\055\uffd1\067\uffd1\001\002\000\004\052\uffcc" +
    "\001\002\000\004\052\uffc9\001\002\000\004\052\044\001" +
    "\002\000\004\052\uffcb\001\002\000\004\052\uffc6\001\002" +
    "\000\020\017\uffcf\020\uffcf\021\uffcf\022\uffcf\054\uffcf\055" +
    "\uffcf\067\uffcf\001\002\000\020\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\054\uffd0\055\uffd0\067\uffd0\001\002\000\010\054" +
    "\uffed\055\uffed\067\uffed\001\002\000\010\054\uffea\055\uffea" +
    "\067\uffea\001\002\000\010\054\uffeb\055\uffeb\067\uffeb\001" +
    "\002\000\010\054\uffec\055\uffec\067\uffec\001\002\000\010" +
    "\054\054\055\056\067\053\001\002\000\034\002\uffe6\017" +
    "\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6" +
    "\027\uffe6\030\uffe6\031\uffe6\032\uffe6\055\uffe6\001\002\000" +
    "\044\002\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\047" +
    "\uffe5\050\uffe5\051\uffe5\055\uffe5\066\uffe5\001\002\000\034" +
    "\002\uffd2\017\067\021\070\022\066\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\055\uffd2" +
    "\001\002\000\044\002\uffe4\017\uffe4\021\uffe4\022\uffe4\023" +
    "\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4" +
    "\032\uffe4\047\uffe4\050\uffe4\051\uffe4\055\uffe4\066\uffe4\001" +
    "\002\000\044\002\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032" +
    "\uffc2\047\064\050\061\051\062\055\uffc2\066\060\001\002" +
    "\000\006\054\054\055\056\001\002\000\034\002\uffc3\017" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\055\uffc3\001\002\000" +
    "\034\002\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5" +
    "\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\055" +
    "\uffc5\001\002\000\034\002\uffe8\017\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\032\uffe8\055\uffe8\001\002\000\034\002\uffc4\017\uffc4" +
    "\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\031\uffc4\032\uffc4\055\uffc4\001\002\000\034" +
    "\002\uffe7\017\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025" +
    "\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\055\uffe7" +
    "\001\002\000\026\002\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\055\uffd4\001\002" +
    "\000\026\002\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\032\uffd3\055\uffd3\001\002\000\026" +
    "\002\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\031\uffd5\032\uffd5\055\uffd5\001\002\000\026\002\uffe0" +
    "\023\074\024\102\025\073\026\076\027\101\030\075\031" +
    "\100\032\072\055\104\001\002\000\004\002\uffd9\001\002" +
    "\000\004\002\uffde\001\002\000\004\002\uffe3\001\002\000" +
    "\004\002\uffdb\001\002\000\004\002\uffdd\001\002\000\004" +
    "\002\000\001\002\000\004\002\uffda\001\002\000\004\002" +
    "\uffdc\001\002\000\004\002\uffdf\001\002\000\004\002\uffe1" +
    "\001\002\000\006\002\uffd8\053\106\001\002\000\004\002" +
    "\uffe2\001\002\000\004\055\107\001\002\000\006\002\uffd7" +
    "\053\110\001\002\000\004\055\111\001\002\000\004\002" +
    "\uffd6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\014\002\006\003\017\004\011\005\005\006" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\021\001\001\000\002\001\001\000\004\010\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\032\022\033\023\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\054\021\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\070\001\001\000\002\001\001\000\004" +
    "\020\062\001\001\000\004\021\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\076\014\104\015\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s){
System.out.println("Error en la linea "+(s.right+1)+"Columna"+s.left+" .Identificador "+s.value+" no reconocido ");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


//AQUI VAN LAS DECLARACIONES DE VARIABLES PARA LA ACCIÓN DEL PROGRAMA

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // nt_length ::= 
            {
              String RESULT =null;
		System.out.println("duración?");CUP$parser$parser.report_fatal_error(RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_length",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // nt_length ::= MEDIUM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_length",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // nt_length ::= LONG 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_length",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // nt_length ::= SHORT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_length",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // nt_possesive ::= THEIR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // nt_possesive ::= OUR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // nt_possesive ::= HER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // nt_possesive ::= HIS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // nt_possesive ::= ITS 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // nt_possesive ::= YOUR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // nt_possesive ::= MY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // nt_article ::= THE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_article",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // nt_sustantive ::= 
            {
              String RESULT =null;
		System.out.println("con quien?");CUP$parser$parser.report_fatal_error(RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sustantive",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nt_sustantive ::= nt_possesive OBJECT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sustantive",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nt_sustantive ::= nt_article OBJECT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sustantive",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nt_sustantive ::= OBJECT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sustantive",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nt_time_op_close ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op_close",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nt_time_op_close ::= AT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op_close",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nt_time_op_close ::= IN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op_close",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nt_time_op_close ::= ON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op_close",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nt_date_format ::= INTLITERAL SLASH INTLITERAL SLASH INTLITERAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_date_format",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nt_date_format ::= INTLITERAL SLASH INTLITERAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_date_format",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // nt_date_format ::= INTLITERAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_date_format",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // nt_day_of_week ::= SUNDAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nt_day_of_week ::= SATURDAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nt_day_of_week ::= FRIDAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nt_day_of_week ::= THURSDAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nt_day_of_week ::= WEDNESDAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nt_day_of_week ::= TUESDAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nt_day_of_week ::= MONDAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nt_day ::= 
            {
              String RESULT =null;
		System.out.println("que dia?");CUP$parser$parser.report_fatal_error(RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nt_day ::= nt_date_format 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nt_day ::= nt_day_of_week 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nt_day ::= TODAY 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nt_hour ::= INTLITERAL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_hour",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nt_hour ::= HOUR 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_hour",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nt_time ::= errorlex 
            {
              String RESULT =null;
		System.out.println("hora mal");CUP$parser$parser.report_fatal_error(RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nt_time ::= nt_hour TO nt_hour 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nt_time ::= nt_hour nt_length 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nt_time_op ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nt_time_op ::= IN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nt_time_op ::= ON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nt_time_op ::= FROM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nt_time_op ::= AT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nt_relation_op ::= AT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_relation_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nt_relation_op ::= WITH 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_relation_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nt_type ::= 
            {
              String RESULT =null;
		System.out.println("que se va a crear?");CUP$parser$parser.report_fatal_error(RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nt_type ::= COMMITMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nt_type ::= DATE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nt_delete_action ::= DELETE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_delete_action",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nt_delete_action ::= REMOVE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_delete_action",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nt_delete_action ::= CANCEL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_delete_action",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nt_change_action ::= CHANGE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_change_action",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nt_change_action ::= MOVE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_change_action",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nt_create_action ::= ADD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_create_action",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nt_create_action ::= MAKE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_create_action",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nt_create_action ::= CREATE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_create_action",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nt_action ::= 
            {
              String RESULT =null;
		System.out.println("cual accion?");CUP$parser$parser.report_fatal_error(RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_action",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nt_action ::= nt_change_action 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_action",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nt_action ::= nt_delete_action 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_action",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nt_action ::= nt_create_action 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_action",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nt_sentence ::= errorlex 
            {
              String RESULT =null;
		System.out.println("errorlex");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nt_sentence ::= nt_action nt_type nt_relation_op nt_sustantive nt_time_op nt_time nt_time_op_close nt_day 
            {
              String RESULT =null;
		 System.out.println("CHIDO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nt_sentence EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


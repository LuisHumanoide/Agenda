
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jun 09 03:50:28 PDT 2017
//----------------------------------------------------

package translator;

import java_cup.runtime.*;
import java.util.Date;
import agenda.ConfigDuration;
import agenda.ActionMessage;
import agenda.eAction;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jun 09 03:50:28 PDT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\004\000\002\002\012\000\002\002" +
    "\012\000\002\002\016\000\002\002\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\002\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\006\003\000\002\006\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\002\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\002\000\002\012\004\000\002\012" +
    "\005\000\002\021\004\000\002\021\004\000\002\024\003" +
    "\000\002\024\003\000\002\024\002\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\002\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\015\003\000\002\015\005\000\002\015\007\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\002\000\002\017\003\000\002\017\004\000\002\017" +
    "\004\000\002\017\002\000\002\022\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\024\004\004\005\020\006\015\007\016\010" +
    "\010\011\017\012\005\013\012\067\011\001\002\000\012" +
    "\014\ufff8\015\ufff8\016\ufff8\017\ufff8\001\002\000\012\014" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\001\002\000\012\014\022" +
    "\015\023\016\uffee\017\uffee\001\002\000\004\002\127\001" +
    "\002\000\012\014\ufff2\015\ufff2\016\ufff2\017\ufff2\001\002" +
    "\000\004\002\ufffd\001\002\000\012\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\001\002\000\012\014\022\015\023\016\uffee" +
    "\017\uffee\001\002\000\012\014\022\015\023\016\uffee\017" +
    "\uffee\001\002\000\012\014\ufff6\015\ufff6\016\ufff6\017\ufff6" +
    "\001\002\000\012\014\ufff1\015\ufff1\016\ufff1\017\ufff1\001" +
    "\002\000\012\014\ufff3\015\ufff3\016\ufff3\017\ufff3\001\002" +
    "\000\012\014\ufff7\015\ufff7\016\ufff7\017\ufff7\001\002\000" +
    "\006\016\026\017\025\001\002\000\006\016\ufff0\017\ufff0" +
    "\001\002\000\006\016\uffef\017\uffef\001\002\000\040\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\052\035\054\uffca\055\uffca" +
    "\056\034\057\036\060\041\061\030\062\037\063\032\064" +
    "\042\065\027\001\002\000\040\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\052\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\001\002" +
    "\000\040\017\uffed\020\uffed\021\uffed\022\uffed\052\uffed\054" +
    "\uffed\055\uffed\056\uffed\057\uffed\060\uffed\061\uffed\062\uffed" +
    "\063\uffed\064\uffed\065\uffed\001\002\000\004\052\uffc3\001" +
    "\002\000\004\052\uffc6\001\002\000\016\017\045\020\050" +
    "\021\047\022\046\054\uffe7\055\uffe7\001\002\000\004\052" +
    "\uffc4\001\002\000\004\052\044\001\002\000\004\052\uffc9" +
    "\001\002\000\016\017\uffcd\020\uffcd\021\uffcd\022\uffcd\054" +
    "\uffcd\055\uffcd\001\002\000\004\052\uffc8\001\002\000\004" +
    "\052\uffc5\001\002\000\004\052\043\001\002\000\004\052" +
    "\uffc7\001\002\000\004\052\uffc2\001\002\000\016\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\054\uffcb\055\uffcb\001\002\000" +
    "\016\017\uffcc\020\uffcc\021\uffcc\022\uffcc\054\uffcc\055\uffcc" +
    "\001\002\000\006\054\uffeb\055\uffeb\001\002\000\006\054" +
    "\uffe8\055\uffe8\001\002\000\006\054\uffe9\055\uffe9\001\002" +
    "\000\006\054\uffea\055\uffea\001\002\000\006\054\052\055" +
    "\053\001\002\000\050\002\uffe0\017\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\032\uffe0\047\uffe0\050\uffe0\051\uffe0\055\uffe0\066\uffe0" +
    "\072\116\073\115\001\002\000\050\002\uffe0\017\uffe0\021" +
    "\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\030\uffe0\031\uffe0\032\uffe0\047\uffe0\050\uffe0\051\uffe0\055" +
    "\uffe0\066\uffe0\072\116\073\115\001\002\000\034\017\055" +
    "\021\057\022\056\023\uffce\024\uffce\025\uffce\026\uffce\027" +
    "\uffce\030\uffce\031\uffce\032\uffce\055\uffce\066\uffce\001\002" +
    "\000\030\002\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\055\uffcf\066\uffcf\001\002" +
    "\000\030\002\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\055\uffd0\066\uffd0\001\002" +
    "\000\030\002\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\030\uffd1\031\uffd1\032\uffd1\055\uffd1\066\uffd1\001\002" +
    "\000\026\023\063\024\071\025\062\026\065\027\067\030" +
    "\064\031\070\032\061\055\073\066\uffdc\001\002\000\006" +
    "\002\uffd5\066\uffd5\001\002\000\006\002\uffda\066\uffda\001" +
    "\002\000\006\002\uffdf\066\uffdf\001\002\000\006\002\uffd7" +
    "\066\uffd7\001\002\000\006\002\uffd9\066\uffd9\001\002\000" +
    "\004\066\101\001\002\000\006\002\uffd8\066\uffd8\001\002" +
    "\000\006\002\uffd6\066\uffd6\001\002\000\006\002\uffdb\066" +
    "\uffdb\001\002\000\006\002\uffdd\066\uffdd\001\002\000\010" +
    "\002\uffd4\053\075\066\uffd4\001\002\000\006\002\uffde\066" +
    "\uffde\001\002\000\004\055\076\001\002\000\010\002\uffd3" +
    "\053\077\066\uffd3\001\002\000\004\055\100\001\002\000" +
    "\006\002\uffd2\066\uffd2\001\002\000\006\054\052\055\053" +
    "\001\002\000\034\002\uffce\017\055\021\057\022\056\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\055\uffce\001\002\000\044\002\uffbe\017\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\032\uffbe\047\107\050\105\051\106\055" +
    "\uffbe\066\104\001\002\000\006\054\052\055\053\001\002" +
    "\000\034\002\uffbf\017\uffbf\021\uffbf\022\uffbf\023\uffbf\024" +
    "\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\055\uffbf\001\002\000\034\002\uffc1\017\uffc1\021\uffc1\022" +
    "\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\031\uffc1\032\uffc1\055\uffc1\001\002\000\034\002\uffc0\017" +
    "\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\055\uffc0\001\002\000" +
    "\034\002\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\055" +
    "\uffe6\001\002\000\034\002\uffe5\017\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\032\uffe5\055\uffe5\001\002\000\026\002\uffdc\023\063" +
    "\024\071\025\062\026\065\027\067\030\064\031\070\032" +
    "\061\055\073\001\002\000\004\002\ufffe\001\002\000\044" +
    "\002\uffe3\017\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\047\uffe3" +
    "\050\uffe3\051\uffe3\055\uffe3\066\uffe3\001\002\000\044\002" +
    "\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1" +
    "\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\055\uffe1\066\uffe1\001\002\000\044\002\uffe2" +
    "\017\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\047\uffe2\050\uffe2" +
    "\051\uffe2\055\uffe2\066\uffe2\001\002\000\044\002\uffe4\017" +
    "\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\047\uffe4\050\uffe4\051" +
    "\uffe4\055\uffe4\066\uffe4\001\002\000\006\016\026\017\025" +
    "\001\002\000\040\017\uffca\020\uffca\021\uffca\022\uffca\052" +
    "\035\054\uffca\055\uffca\056\034\057\036\060\041\061\030" +
    "\062\037\063\032\064\042\065\027\001\002\000\016\017" +
    "\045\020\050\021\047\022\046\054\uffe7\055\uffe7\001\002" +
    "\000\006\054\052\055\053\001\002\000\034\002\uffce\017" +
    "\055\021\057\022\056\023\uffce\024\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\032\uffce\055\uffce\001\002\000" +
    "\026\002\uffdc\023\063\024\071\025\062\026\065\027\067" +
    "\030\064\031\070\032\061\055\073\001\002\000\004\002" +
    "\000\001\002\000\004\002\001\001\002\000\006\016\026" +
    "\017\025\001\002\000\040\017\uffca\020\uffca\021\uffca\022" +
    "\uffca\052\035\054\uffca\055\uffca\056\034\057\036\060\041" +
    "\061\030\062\037\063\032\064\042\065\027\001\002\000" +
    "\016\017\045\020\050\021\047\022\046\054\uffe7\055\uffe7" +
    "\001\002\000\006\054\052\055\053\001\002\000\034\002" +
    "\uffce\017\055\021\057\022\056\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\055\uffce\001" +
    "\002\000\026\002\uffdc\023\063\024\071\025\062\026\065" +
    "\027\067\030\064\031\070\032\061\055\073\001\002\000" +
    "\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\012\002\006\004\012\005\005\006\013\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\007\117\001\001\000\004" +
    "\007\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\030\022" +
    "\032\023\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\053" +
    "\001\001\000\004\024\116\001\001\000\004\024\113\001" +
    "\001\000\004\016\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\013\065\014\073\015" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\101\021\102\001\001\000\004\016" +
    "\111\001\001\000\004\020\107\001\001\000\004\021\110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\112" +
    "\014\073\015\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\120\001\001\000\010\017\121\022\032\023" +
    "\037\001\001\000\004\011\122\001\001\000\006\012\123" +
    "\021\102\001\001\000\004\016\124\001\001\000\010\013" +
    "\125\014\073\015\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\130\001\001\000\010\017\131\022" +
    "\032\023\037\001\001\000\004\011\132\001\001\000\004" +
    "\021\133\001\001\000\004\016\134\001\001\000\010\013" +
    "\135\014\073\015\071\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    parser s;
    parser(parser s){ this.s=s; }
public void syntax_error(Symbol s){
System.out.println("Error en la linea "+(s.right+1)+"Columna"+s.left+" .Identificador "+s.value+" no reconocido ");
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


//AQUI VAN LAS DECLARACIONES DE VARIABLES PARA LA ACCIÓN DEL PROGRAMA
	ActionMessage actionMessage;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // nt_length ::= 
            {
              Integer RESULT =null;
		RESULT=ConfigDuration.MEDIUM_DURATION;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_length",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // nt_length ::= MEDIUM 
            {
              Integer RESULT =null;
		RESULT=ConfigDuration.MEDIUM_DURATION;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_length",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // nt_length ::= LONG 
            {
              Integer RESULT =null;
		RESULT=ConfigDuration.LONG_DURATION;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_length",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // nt_length ::= SHORT 
            {
              Integer RESULT =null;
		RESULT=ConfigDuration.SHORT_DURATION;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_length",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // nt_possesive ::= THEIR 
            {
              String RESULT =null;
		RESULT="their";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // nt_possesive ::= OUR 
            {
              String RESULT =null;
		RESULT="our";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // nt_possesive ::= HER 
            {
              String RESULT =null;
		RESULT="her";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // nt_possesive ::= HIS 
            {
              String RESULT =null;
		RESULT="his";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // nt_possesive ::= ITS 
            {
              String RESULT =null;
		RESULT="its";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // nt_possesive ::= YOUR 
            {
              String RESULT =null;
		RESULT="your";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // nt_possesive ::= MY 
            {
              String RESULT =null;
		RESULT="my";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_possesive",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // nt_article ::= THE 
            {
              String RESULT =null;
		RESULT="the";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_article",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // nt_sustantive ::= 
            {
              String RESULT =null;
		System.out.println("con quien?");CUP$parser$parser.report_fatal_error(RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sustantive",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // nt_sustantive ::= nt_possesive OBJECT 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sustantive",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // nt_sustantive ::= nt_article OBJECT 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sustantive",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // nt_sustantive ::= OBJECT 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=o;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sustantive",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // nt_time_op_close ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op_close",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // nt_time_op_close ::= AT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op_close",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nt_time_op_close ::= IN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op_close",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nt_time_op_close ::= ON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op_close",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nt_date_format ::= INTLITERAL SLASH INTLITERAL SLASH INTLITERAL 
            {
              Date RESULT =null;
		int dayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String day = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int monthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int monthright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String month = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yearleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int yearright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String year = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						 	RESULT=null;
							 	if(!DateValidation.validateDate(day, month, year)){
									System.out.println("error en fecha");
									CUP$parser$parser.report_fatal_error(""+RESULT, this);
								}
								else{
									int i_day=Integer.parseInt(day);
									int i_month=Integer.parseInt(month);
									int i_year=Integer.parseInt(year);
									RESULT=DateUtils.getDate(i_day,i_month,i_year);
								}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_date_format",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nt_date_format ::= INTLITERAL SLASH INTLITERAL 
            {
              Date RESULT =null;
		int dayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String day = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int monthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int monthright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String month = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			
							RESULT=null;
								if(!DateValidation.validateDate(day, month)){
									System.out.println("error en fecha");
									CUP$parser$parser.report_fatal_error(""+RESULT, this);
								}
								else{
									int i_day=Integer.parseInt(day);
									int i_month=Integer.parseInt(month);
									RESULT=DateUtils.getDate(i_day,i_month);
								}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_date_format",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nt_date_format ::= INTLITERAL 
            {
              Date RESULT =null;
		int dayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dayright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String day = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT=null;
							if(!DateValidation.validateDate(day)){
								System.out.println("error en fecha");
								CUP$parser$parser.report_fatal_error(""+RESULT, this);
							}
							else{
								int i_day=Integer.parseInt(day);
								RESULT=DateUtils.getDate(i_day);
							}
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_date_format",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nt_day_of_week ::= SUNDAY 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="sunday";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nt_day_of_week ::= SATURDAY 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="saturday";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // nt_day_of_week ::= FRIDAY 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="friday";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // nt_day_of_week ::= THURSDAY 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="thursday";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // nt_day_of_week ::= WEDNESDAY 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="wednesday";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // nt_day_of_week ::= TUESDAY 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="tuesday";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nt_day_of_week ::= MONDAY 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT="monday";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day_of_week",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nt_day ::= 
            {
              Date RESULT =null;
		System.out.println("que dia?");CUP$parser$parser.report_fatal_error(""+RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nt_day ::= nt_date_format 
            {
              Date RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Date df = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							RESULT=df;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nt_day ::= nt_day_of_week 
            {
              Date RESULT =null;
		int dayNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dayNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dayName = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
							RESULT=DateUtils.getProxDay(dayName);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nt_day ::= TODAY 
            {
              Date RESULT =null;
		
							RESULT=DateUtils.getToday();
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_day",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nt_meridian ::= 
            {
              String RESULT =null;
		RESULT="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_meridian",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nt_meridian ::= PM 
            {
              String RESULT =null;
		RESULT="pm";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_meridian",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // nt_meridian ::= AM 
            {
              String RESULT =null;
		RESULT="am";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_meridian",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // nt_hour ::= INTLITERAL nt_meridian 
            {
              Date RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String il = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=DateUtils.getHour(Integer.parseInt(il),m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_hour",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nt_hour ::= HOUR nt_meridian 
            {
              Date RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=DateUtils.getHour(h,m);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_hour",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nt_time ::= nt_hour TO nt_hour 
            {
              TimeRange RESULT =null;
		int h1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int h1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Date h1 = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int h2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int h2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Date h2 = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TimeRange(h1,h2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nt_time ::= nt_hour nt_length 
            {
              TimeRange RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Date h = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=new TimeRange(h,DateUtils.getHourWithDuration(h,l));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nt_time_op ::= 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nt_time_op ::= IN 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nt_time_op ::= ON 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // nt_time_op ::= FROM 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // nt_time_op ::= AT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_time_op",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // nt_relation_op ::= AT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_relation_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // nt_relation_op ::= WITH 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_relation_op",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nt_type ::= 
            {
              String RESULT =null;
		System.out.println("que se va a crear?");CUP$parser$parser.report_fatal_error(RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nt_type ::= COMMITMENT 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nt_type ::= DATE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nt_delete_action ::= DELETE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_delete_action",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nt_delete_action ::= REMOVE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_delete_action",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // nt_delete_action ::= CANCEL 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_delete_action",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // nt_change_action ::= CHANGE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_change_action",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // nt_change_action ::= MOVE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_change_action",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // nt_create_action ::= ADD 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_create_action",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // nt_create_action ::= MAKE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_create_action",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // nt_create_action ::= CREATE 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_create_action",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // nt_action ::= 
            {
              String RESULT =null;
		System.out.println("cual accion?");CUP$parser$parser.report_fatal_error(RESULT, this);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_action",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // nt_action ::= nt_change_action 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_action",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // nt_action ::= nt_delete_action 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_action",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // nt_action ::= nt_create_action 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_action",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // nt_sentence ::= errorlex 
            {
              String RESULT =null;
		System.out.println("errorlex");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // nt_sentence ::= nt_change_action nt_type nt_relation_op nt_sustantive nt_time_op nt_hour nt_time_op_close nt_day TO nt_time nt_time_op_close nt_day 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Date h = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int t2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int t2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TimeRange t2 = (TimeRange)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Date d2 = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        	Date start1=DateUtils.mergeTimes(d,h);
                        	Date start2=DateUtils.mergeTimes(d2,t2.getTime1());
                        	Date end2=DateUtils.mergeTimes(d2,t2.getTime2());
                        	actionMessage=new ActionMessage(eAction.UPDATE,s.toLowerCase(),start1,start2,end2);
                       	    System.out.println("CHIDO"); 
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // nt_sentence ::= nt_delete_action nt_type nt_relation_op nt_sustantive nt_time_op nt_hour nt_time_op_close nt_day 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Date h = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        	Date start=DateUtils.mergeTimes(d,h);
                        	actionMessage=new ActionMessage(eAction.DELETE,s.toLowerCase(),start);
                        	System.out.println("CHIDO"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // nt_sentence ::= nt_create_action nt_type nt_relation_op nt_sustantive nt_time_op nt_time nt_time_op_close nt_day 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TimeRange t = (TimeRange)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Date d = (Date)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 System.out.println("CHIDO"); 
                        	Date start=DateUtils.mergeTimes(d,t.getTime1());
                        	Date end=DateUtils.mergeTimes(d,t.getTime2());
                        	actionMessage=new ActionMessage(eAction.CREATE,s.toLowerCase(),start,end);

                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nt_sentence",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= nt_sentence EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

